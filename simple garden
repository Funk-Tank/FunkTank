import pygame
import random
import sys

# 初始化 Pygame
pygame.init()

# 定义常量
WIDTH, HEIGHT = 1000, 1000
TILE_SIZE = 100
ROWS, COLS = 8, 10
FPS = 30
BG_COLOR = (15, 20, 30)
GREEN = (0, 255, 0)

# 创建窗口
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Simple Garden")

# 加载图案图片
patterns = [pygame.image.load(f"pattern_{i}.png") for i in range(1, 8)]
patterns = [pygame.transform.scale(p, (TILE_SIZE, TILE_SIZE)) for p in patterns]

# 创建游戏板
temp = patterns.copy()
board = [[None for _ in range(COLS)] for _ in range(ROWS)]
a = [0] * 7
for i in range(ROWS):
    for j in range(COLS):
        if (i == 0 or i == 7) and (j == 0 or j == 4 or j == 5 or j == 9):
            continue
        board[i][j] = random.choice(temp)
        if board[i][j] == patterns[0]:
            a[0] += 1
        elif board[i][j] == patterns[1]:
            a[1] += 1
        elif board[i][j] == patterns[2]:
            a[2] += 1
        elif board[i][j] == patterns[3]:
            a[3] += 1
        elif board[i][j] == patterns[4]:
            a[4] += 1
        elif board[i][j] == patterns[5]:
            a[5] += 1
        elif board[i][j] == patterns[6]:
            a[6] += 1
        temp = []
        for k in range(0, 7):
            if k == 0 or k == 5 or k == 6:
                if a[k] < 8:
                    temp.append(patterns[k])
            else:
                if a[k] < 12:
                    temp.append(patterns[k])
selected = []
eliminated = set()
start = True
flag = 72
game_over = False

def draw_board():
    for row in range(ROWS):
        for col in range(COLS):
            if (row == 0 or row == 7) and (col == 0 or col == 4 or col == 5 or col == 9):
                eliminated.add((row, col))
                continue
            tile = board[row][col]
            if tile is not None:
                # 绘制图片
                screen.blit(tile, (col * TILE_SIZE, row * TILE_SIZE))
                # 检查当前 tile 是否被选中
                if (row, col) in selected:
                    # 绘制绿色边框
                    pygame.draw.rect(screen, GREEN, (col * TILE_SIZE, row * TILE_SIZE, TILE_SIZE, TILE_SIZE), 5)


def selectable(row, col):
    """检查给定位置的图片是否可以被选中。"""
    count = 0
    for r, c in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:
        # 检查是否在游戏板范围内
        if 0 <= r < ROWS and 0 <= c < COLS:
            # 检查是否在已消除集合中
            if (r, c) in eliminated:
                count += 1
        else:
            count += 1
    if count > 1:
        return True
    return False


def toggle_selection(row, col):
    """切换图片的选中状态。如果图片已被选中，则取消选择；否则尝试选择图片。"""
    if (row, col) in selected:
        selected.remove((row, col))
    else:
        selected.append((row, col))


def check_match(f):
    if len(selected) == 2:
        r1, c1 = selected[0]
        r2, c2 = selected[1]
        if board[r2][c2] == patterns[0]:
            r1, c1 = selected[1]
            r2, c2 = selected[0]
        if board[r1][c1] == patterns[0] and (board[r2][c2] == patterns[1] or board[r2][c2] == patterns[2] or board[r2][c2] == patterns[3] or board[r2][c2] == patterns[4]):
            f = clear(r1, c1, r2, c2, f)
        elif board[r1][c1] == patterns[5] or board[r2][c2] == patterns[5]:
            if (board[r1][c1] == patterns[5] and board[r2][c2] == patterns[6]) or (board[r1][c1] == patterns[6] and board[r2][c2] == patterns[5]):
                f = clear(r1, c1, r2, c2, f)
        elif board[r1][c1] == board[r2][c2]:
            f = clear(r1, c1, r2, c2, f)
        selected.clear()
    return f

def clear(r1, c1, r2, c2, d):
    for i in range(5):
        if board[r1][c1] == patterns[i]:
            a[i] -= 1
        if board[r2][c2] == patterns[i]:
            a[i] -= 1
    board[r1][c1] = None
    board[r2][c2] = None
    eliminated.add((r1, c1))
    eliminated.add((r2, c2))
    d -= 2
    return d

# 主游戏循环
running = True
clock = pygame.time.Clock()

while running:
    clock.tick(FPS)
    if start:
        font = pygame.font.SysFont(None, 64)
        screen.fill(BG_COLOR)
        text = font.render("Click to start", True, (255, 255, 255))
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        screen.blit(text, text_rect)
        pygame.display.flip()
        start = False

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if game_over:
                # 检查是否点击了退出按钮
                if quit_button_rect.collidepoint(event.pos):
                    running = False
            # 获取鼠标点击位置
            x, y = event.pos
            # 检查点击是否在游戏板区域内
            if 0 <= x < WIDTH and 0 <= y < HEIGHT - 200:
                col, row = x // TILE_SIZE, y // TILE_SIZE
                if board[row][col] is not None:
                    if selectable(row, col):
                        toggle_selection(row, col)
                    if len(selected) == 2:
                        flag = check_match(flag)
                        selected = []
            if flag <= 0:
                screen.fill(BG_COLOR)
                font = pygame.font.SysFont(None, 74)
                text = font.render('Completed', True, (255, 255, 255))
                text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
                screen.blit(text, text_rect)
                # 绘制退出按钮
                quit_button_text = font.render('Click to quit', True, (255, 255, 255))
                quit_button_rect = pygame.Rect(WIDTH // 2 - 75, HEIGHT // 2 + 100, 150, 80)  # 定义退出按钮的矩形区域
                quit_button_text_rect = quit_button_text.get_rect(center=quit_button_rect.center)  # 计算文本的矩形区域
                screen.blit(quit_button_text, quit_button_text_rect)  # 绘制文本
                game_over = True

                pygame.display.flip()
            else:
                screen.fill(BG_COLOR)
                draw_board()
                # 绘制底部显示图案个数的图片和文本
                for i in range(5):
                    # 加载图案图片
                    pattern_image = pygame.image.load(f"pattern_{i + 1}.png")
                    pattern_image = pygame.transform.scale(pattern_image, (100, 100))  # 调整图片大小

                    # 计算图片位置
                    image_rect = pattern_image.get_rect(center=(i * 200 + 50, HEIGHT - 50))
                    screen.blit(pattern_image, image_rect)

                    # 绘制文本显示数量
                    text_color = (255, 0, 0) if a[i] % 2 != 0 else (255, 255, 255)
                    text = font.render(f": {a[i]}", True, text_color)  # 注意这里文本前面有一个冒号
                    text_rect = text.get_rect(center=(i * 200 + 140, HEIGHT - 50))
                    screen.blit(text, text_rect)
                    screen.blit(text, text_rect)
                pygame.display.flip()

pygame.quit()
